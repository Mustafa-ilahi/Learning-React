const bulbSwitch = true;

Binary Operators:-

{!bulbSwitch && <img src="OffBulb"/>}
{bulbSwitch && <img src="OnBulb"/>}


Ternary Operators:-

{bulbSwitch ?
<img src="OnBulb"/>
:
<img src="OffBulb"/>
} 

<img src={bulbSwitch ? bulbOn : bulbOff}


Todo Add items:

const addItem = () =>{
const tempList = [...list]; //Copying orignal state
tempList.push(text);  //push on new array
setList(tempList);  // Update state
}


Components:
1)Agr screenWise components banayengy to src k andr  Views/Screen ka folder banega.
1)Agr reuseable components banayengy to src k andr components ka folder banega.

Note: Component name always starts with capital letter. 


/*
Child se parent ki state change karna:
  1) Create a function in Parent component that will
  update the state
  2) Pass that function into Child component via props
  3) Call that function on any event
*/


Hooks

useEffect Component ki zindagi mai ek bar chlega.It takes 2 parametes one is call back function the second one is dependency list(ye wo list hoti ha jis pr useEffect dependent hoti ha)

useEffect = (()=>{

},[currentQuestion])

dependencyList ===> currentQuestion == jb bh ye change h0ga useEffect chlega


useEffect(() =>{},[]
1)Intial: Kch kam krwana ho Component render ho or  sirf ek martaba. [] e.g. API requests
2)Updation: Kch km krwana kisi state ya props ke updation pr [currentQuestion]
3)Unmounting: Kch km krwana ho component end hone se pehle e.g: removeEventListeners.
3==> return () => {
	console.log('unmount')
}


****** Firebase ******
1)Goto console.firebase.com
2)Add Project
3)Install firebase into your project (npm install firebase)
4)Goto project setting and choose webapp then register your app
5)copy cdn <script> tag
6) Create folder in src ==> named as ==> config==> firebase.js
7)import firebase from 'firebase'
8)Paste cdn script into firebase.js

***** Firebase Authentication*****  
1)Goto Authentication
2)Select Email/password
3)search==> firebase web authentication
4)copy firebase.auth().createUserWith email wala function
5)and same for login 


****Steps for getting firebase authentication resposnse in components****

1)**** In firebase we remove then and catch method uski jaga return lga dengy bs****


2)const signIn = async () => {
try{
 const user = await login(email,password);
setUserLoggedIn(true)
}catch(e){
setErrorMessage(e.message);
}
}
<button onClick={()=> signIn}>Sign In </button>


**** Adding something in firestore-database  with random id*****
const db = firebase.firestore();

db.collection('users').add({email,password})
Note: it generates random ID


**** Adding something in firestore-database  set ID manually*****
db.collection('users').doc(user.uid).set({email,password})
Note: it doesn't generates random ID


**** Getting data from firebase ****

In firebase.js 
function getAllUsers(){
    return db.collection('users').get()
  }

Wo component jaha data lana ha

    const [user,setUser] = useState([]);

    useEffect(async ()=>{
    const usersData = await getAllUsers()
    const tempUsers = [];
    usersData.forEach(doc =>{
        // console.log(doc.data())
        const obj = {...doc.data(), id:doc.id}
        // console.log(obj)
        tempUsers.push(obj);
    })
    setUser(tempUsers);
    },[])



user: all firebase data availabe in user


**** For getting realtime data ****


**** Firebase.js****
function getAllUsers(callback){

db.collection('users').onSnapShot(snapshot => {
      snapshot.forEach(doc => {
	const users= []
                const obj = {...doc.data(), id:doc.id}
                users.push(obj)
})
   callback(users)
  })
}


**** Component.js ****
 useEffect(async ()=>{
 getAllUsers(data => {
  setUsers(data)
})  
},[])




****** Firebase hosting******

1) npm install -g firebase-tools
2)firebase login
3)firebase init
	i)Selecting option using spacebar
	ii) Select project
	iii)Enter public directory type (build)
	iv)3 times NO
4)npm run build
5)firebase deploy




****** Firebase Storage******

const storage = firesbase.storage();

async function storeImg(files) {
const storageRef = storage.ref(`images/${files[0].name}`)
await storageRef.put(files[0])
const url = await storageRef.getDownloadURL()
console.log('url===>',url)
await db.collection('ads').add({imageUrl : url})
}



****** Redux ******
1) Data can be shared in multiple components.
2) Data is stored in Store.
3) Whenever state updates in store, it will tell the component about change.
4) Redux can be synced with localStorage


====== Compenent ==> Actions ==> Reducers ==> Store

Implementaion:
1)Configuratrion
2)Usage


1)Configuration:
i)Install two librarires (npm i redux react-redux)
ii) Create a folder in src named as "store".
iii) In this folder create "index.js".
iv) In store we create two folders "actions" and "reducer".
v) In both folder we need to create "index.js".

**** Store--->index.js ****

==> import { createStore } from 'redux'
==> import reducer from './reducers'

==> const store = createStore(reducer)
==> export default store

------------------ x ------------------

**** App.js****

==> import { Provider } from 'react-redux'
==> import store from './store'

==> <Provider store={store}> </Provider
Note: All our work it should be in provider tag and we pass store as a props.

------------------ x ------------------

**** Actions--->index.js ****

==> function storeUser(user){
return {
	type: 'ADD_USER',
	data: user
            }
  }
 
==> function removeUser(){
return {
	type: 'REMOVE_USER'
            }
  } 

export{ 
    storeUser,
    removeUser
}

Note: Type name always be in Capital Letter, Type btati ha user ko k mai knse action se ayi hun.

------------------ x ------------------


**** Reducers--->index.js ****

==> function reduer(state={}, action) {
            switch(action.type){
	case: 'ADD_USER' : {
	   return {...state, user: action.data}
	}
	case: 'REMOVE_USER' : {
	  return {...state, user: null}
	}
	default : {
	return state	
	}
            }
}

export default reducer

***** Basic configuration completed. *****
Note: Provider hmesha parent file mai hoga. Jaha se action call hoga waha Provider nh hoskta, action hmesha child mai call hoga.

------------------ x ------------------



Now component se action: 
**** App.js****

import { storeUser } from './store/actions'
import { useDispatch } from 'react-redux'

const dispatch = useDispatch()

===> dispatch(storeUser(user))

Note: ye dispatch(storeUser(user)) waha call hoga jaha component se action mai data bhejna hai.


**** From now store tk data chalagya ****

------------------ x ------------------


Getting data from store to another component

 import { useSelector } from 'react-redux'

const myUser = useSelector(state => state.user)


Note: In useSelector ==> state we get all store data.


------------------ x ------------------









